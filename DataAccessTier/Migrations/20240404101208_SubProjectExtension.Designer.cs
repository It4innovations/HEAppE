// <auto-generated />
using System;
using HEAppE.DataAccessTier;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HEAppE.DataAccessTier.Migrations
{
    [DbContext(typeof(MiddlewareContext))]
    [Migration("20240404101208_SubProjectExtension")]
    partial class SubProjectExtension
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HEAppE.DomainObjects.ClusterInformation.Cluster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ConnectionProtocol")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DomainName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MasterNodeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Port")
                        .HasColumnType("int");

                    b.Property<long?>("ProxyConnectionId")
                        .HasColumnType("bigint");

                    b.Property<int>("SchedulerType")
                        .HasColumnType("int");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool?>("UpdateJobStateByServiceAccount")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProxyConnectionId");

                    b.ToTable("Cluster");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.ClusterInformation.ClusterAuthenticationCredentials", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AuthenticationType")
                        .HasColumnType("int");

                    b.Property<int>("CipherType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGenerated")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrivateKeyFile")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PrivateKeyPassword")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PublicKeyFingerprint")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ClusterAuthenticationCredentials");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.ClusterInformation.ClusterNodeType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ClusterAllocationName")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long?>("ClusterId")
                        .HasColumnType("bigint");

                    b.Property<int>("CoresPerNode")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("FileTransferMethodId")
                        .HasColumnType("bigint");

                    b.Property<int?>("MaxNodesPerJob")
                        .HasColumnType("int");

                    b.Property<int?>("MaxNodesPerUser")
                        .HasColumnType("int");

                    b.Property<int?>("MaxWalltime")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NumberOfNodes")
                        .HasColumnType("int");

                    b.Property<string>("QualityOfService")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Queue")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId");

                    b.HasIndex("FileTransferMethodId");

                    b.ToTable("ClusterNodeType");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.ClusterInformation.ClusterNodeTypeRequestedGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ClusterNodeTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClusterNodeTypeId");

                    b.ToTable("ClusterNodeTypeRequestedGroup");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.ClusterInformation.ClusterProxyConnection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ClusterProxyConnection");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.FileTransfer.FileSpecification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("NameSpecification")
                        .HasColumnType("int");

                    b.Property<string>("RelativePath")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SynchronizationType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FileSpecification");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.FileTransfer.FileTransferMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ClusterId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Port")
                        .HasColumnType("int");

                    b.Property<int>("Protocol")
                        .HasColumnType("int");

                    b.Property<string>("ServerHostname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId");

                    b.ToTable("FileTransferMethod");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.FileTransfer.FileTransferTemporaryKey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<long>("SubmittedJobId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SubmittedJobId");

                    b.ToTable("FileTransferTemporaryKey");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.ClusterProject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ClusterId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LocalBasepath")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ClusterId", "ProjectId")
                        .IsUnique();

                    b.ToTable("ClusterProject");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.ClusterProjectCredential", b =>
                {
                    b.Property<long>("ClusterProjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("ClusterAuthenticationCredentialsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsServiceAccount")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ClusterProjectId", "ClusterAuthenticationCredentialsId");

                    b.HasIndex("ClusterAuthenticationCredentialsId");

                    b.ToTable("ClusterProjectCredentials");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.CommandTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ClusterNodeTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("CommandParameters")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedFromId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ExecutableFile")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ExtendedAllocationCommand")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGeneric")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("PreparationScript")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClusterNodeTypeId");

                    b.HasIndex("CreatedFromId");

                    b.HasIndex("ProjectId");

                    b.ToTable("CommandTemplate");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.CommandTemplateParameter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CommandTemplateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CommandTemplateId");

                    b.ToTable("CommandTemplateParameter");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.CommandTemplateParameterValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("TaskSpecificationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TemplateParameterId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("TaskSpecificationId");

                    b.HasIndex("TemplateParameterId");

                    b.ToTable("CommandTemplateParameterValue");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.Contact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PublicKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.EnvironmentVariable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("JobSpecificationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("TaskSpecificationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("JobSpecificationId");

                    b.HasIndex("TaskSpecificationId");

                    b.ToTable("EnvironmentVariable");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.JobInformation.SubmittedJobInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SpecificationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SubmitTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SubmitterId")
                        .HasColumnType("bigint");

                    b.Property<double?>("TotalAllocatedTime")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SpecificationId");

                    b.HasIndex("SubmitterId");

                    b.ToTable("SubmittedJobInfo");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.JobInformation.SubmittedTaskAllocationNodeInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AllocationNodeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("SubmittedTaskInfoId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SubmittedTaskInfoId");

                    b.ToTable("SubmittedTaskAllocationNodeInfo");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.JobInformation.SubmittedTaskInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AllParameters")
                        .HasColumnType("text");

                    b.Property<int?>("AllocatedCores")
                        .HasColumnType("int");

                    b.Property<double?>("AllocatedTime")
                        .HasColumnType("float");

                    b.Property<bool?>("CpuHyperThreading")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("NodeTypeId")
                        .HasColumnType("bigint");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("ScheduledJobId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SpecificationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<long?>("SubmittedJobInfoId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NodeTypeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SpecificationId");

                    b.HasIndex("SubmittedJobInfoId");

                    b.ToTable("SubmittedTaskInfo");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.JobSpecification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ClusterId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ClusterUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FileTransferMethodId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NotificationEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("NotifyOnAbort")
                        .HasColumnType("bit");

                    b.Property<bool?>("NotifyOnFinish")
                        .HasColumnType("bit");

                    b.Property<bool?>("NotifyOnStart")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SubProjectId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SubmitterGroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SubmitterId")
                        .HasColumnType("bigint");

                    b.Property<int?>("WaitingLimit")
                        .HasColumnType("int");

                    b.Property<int?>("WalltimeLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId");

                    b.HasIndex("ClusterUserId");

                    b.HasIndex("FileTransferMethodId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SubProjectId");

                    b.HasIndex("SubmitterGroupId");

                    b.HasIndex("SubmitterId");

                    b.ToTable("JobSpecification");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountingString")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsageType")
                        .HasColumnType("int");

                    b.Property<bool>("UseAccountingStringForScheduler")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AccountingString")
                        .IsUnique();

                    b.ToTable("Project");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.ProjectContact", b =>
                {
                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsPI")
                        .HasColumnType("bit");

                    b.HasKey("ProjectId", "ContactId");

                    b.HasIndex("ContactId");

                    b.ToTable("ProjectContact");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.SubProject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Identifier", "ProjectId")
                        .IsUnique();

                    b.ToTable("SubProject");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.TaskDependency", b =>
                {
                    b.Property<long>("TaskSpecificationId")
                        .HasColumnType("bigint");

                    b.Property<long>("ParentTaskSpecificationId")
                        .HasColumnType("bigint");

                    b.HasKey("TaskSpecificationId", "ParentTaskSpecificationId");

                    b.HasIndex("ParentTaskSpecificationId");

                    b.ToTable("TaskDependency");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.TaskParalizationSpecification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("MPIProcesses")
                        .HasColumnType("int");

                    b.Property<int>("MaxCores")
                        .HasColumnType("int");

                    b.Property<int?>("OpenMPThreads")
                        .HasColumnType("int");

                    b.Property<long?>("TaskSpecificationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TaskSpecificationId");

                    b.ToTable("TaskParalizationSpecification");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.TaskSpecification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ClusterNodeTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ClusterTaskSubdirectory")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("CommandTemplateId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("CpuHyperThreading")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExclusive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRerunnable")
                        .HasColumnType("bit");

                    b.Property<string>("JobArrays")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long?>("JobSpecificationId")
                        .HasColumnType("bigint");

                    b.Property<string>("LocalDirectory")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("LogFileId")
                        .HasColumnType("bigint");

                    b.Property<int?>("MaxCores")
                        .HasColumnType("int");

                    b.Property<int?>("MinCores")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PlacementPolicy")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<long?>("ProgressFileId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("StandardErrorFile")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("StandardInputFile")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("StandardOutputFile")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("WalltimeLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClusterNodeTypeId");

                    b.HasIndex("CommandTemplateId");

                    b.HasIndex("JobSpecificationId");

                    b.HasIndex("LogFileId");

                    b.HasIndex("ProgressFileId");

                    b.HasIndex("ProjectId");

                    b.ToTable("TaskSpecification");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.TaskSpecificationRequiredNode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("NodeName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long?>("TaskSpecificationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TaskSpecificationId");

                    b.ToTable("TaskSpecificationRequiredNode");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackAuthenticationCredential", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("OpenStackAuthenticationCredential");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackAuthenticationCredentialDomain", b =>
                {
                    b.Property<long>("OpenStackAuthenticationCredentialId")
                        .HasColumnType("bigint");

                    b.Property<long>("OpenStackDomainId")
                        .HasColumnType("bigint");

                    b.HasKey("OpenStackAuthenticationCredentialId", "OpenStackDomainId");

                    b.HasIndex("OpenStackDomainId");

                    b.ToTable("OpenStackAuthenticationCredentialDomain");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackAuthenticationCredentialProject", b =>
                {
                    b.Property<long>("OpenStackAuthenticationCredentialId")
                        .HasColumnType("bigint");

                    b.Property<long>("OpenStackProjectId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.HasKey("OpenStackAuthenticationCredentialId", "OpenStackProjectId");

                    b.HasIndex("OpenStackProjectId");

                    b.ToTable("OpenStackAuthenticationCredentialProject");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackDomain", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long>("OpenStackInstanceId")
                        .HasColumnType("bigint");

                    b.Property<string>("UID")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("OpenStackInstanceId");

                    b.ToTable("OpenStackDomain");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackInstance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("InstanceUrl")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("OpenStackInstance");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackProject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AdaptorUserGroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long>("OpenStackDomainId")
                        .HasColumnType("bigint");

                    b.Property<long>("OpenStackProjectDomainId")
                        .HasColumnType("bigint");

                    b.Property<string>("UID")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("AdaptorUserGroupId");

                    b.HasIndex("OpenStackDomainId");

                    b.HasIndex("OpenStackProjectDomainId");

                    b.ToTable("OpenStackProject");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackProjectDomain", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("UID")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.ToTable("OpenStackProjectDomain");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PublicKey")
                        .HasColumnType("text");

                    b.Property<bool>("Synchronize")
                        .HasColumnType("bit");

                    b.Property<int>("UserType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("AdaptorUser");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUserGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("AdaptorUserGroup");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("AdaptorUserRole");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUserUserGroupRole", b =>
                {
                    b.Property<long>("AdaptorUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("AdaptorUserGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("AdaptorUserRoleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AdaptorUserId", "AdaptorUserGroupId", "AdaptorUserRoleId");

                    b.HasIndex("AdaptorUserGroupId");

                    b.HasIndex("AdaptorUserRoleId");

                    b.ToTable("AdaptorUserUserGroupRole");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.OpenStackSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ApplicationCredentialsId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationCredentialsSecret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuthenticationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OpenStackSession");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.SessionCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AuthenticationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastAccessTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UniqueCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SessionCode");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.ClusterInformation.Cluster", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.ClusterInformation.ClusterProxyConnection", "ProxyConnection")
                        .WithMany()
                        .HasForeignKey("ProxyConnectionId");

                    b.Navigation("ProxyConnection");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.ClusterInformation.ClusterNodeType", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.ClusterInformation.Cluster", "Cluster")
                        .WithMany("NodeTypes")
                        .HasForeignKey("ClusterId");

                    b.HasOne("HEAppE.DomainObjects.FileTransfer.FileTransferMethod", "FileTransferMethod")
                        .WithMany()
                        .HasForeignKey("FileTransferMethodId");

                    b.Navigation("Cluster");

                    b.Navigation("FileTransferMethod");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.ClusterInformation.ClusterNodeTypeRequestedGroup", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.ClusterInformation.ClusterNodeType", null)
                        .WithMany("RequestedNodeGroups")
                        .HasForeignKey("ClusterNodeTypeId");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.FileTransfer.FileTransferMethod", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.ClusterInformation.Cluster", "Cluster")
                        .WithMany("FileTransferMethods")
                        .HasForeignKey("ClusterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cluster");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.FileTransfer.FileTransferTemporaryKey", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.JobManagement.JobInformation.SubmittedJobInfo", "SubmittedJob")
                        .WithMany("FileTransferTemporaryKeys")
                        .HasForeignKey("SubmittedJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubmittedJob");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.ClusterProject", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.ClusterInformation.Cluster", "Cluster")
                        .WithMany("ClusterProjects")
                        .HasForeignKey("ClusterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HEAppE.DomainObjects.JobManagement.Project", "Project")
                        .WithMany("ClusterProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cluster");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.ClusterProjectCredential", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.ClusterInformation.ClusterAuthenticationCredentials", "ClusterAuthenticationCredentials")
                        .WithMany("ClusterProjectCredentials")
                        .HasForeignKey("ClusterAuthenticationCredentialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HEAppE.DomainObjects.JobManagement.ClusterProject", "ClusterProject")
                        .WithMany("ClusterProjectCredentials")
                        .HasForeignKey("ClusterProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClusterAuthenticationCredentials");

                    b.Navigation("ClusterProject");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.CommandTemplate", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.ClusterInformation.ClusterNodeType", "ClusterNodeType")
                        .WithMany("PossibleCommands")
                        .HasForeignKey("ClusterNodeTypeId");

                    b.HasOne("HEAppE.DomainObjects.JobManagement.CommandTemplate", "CreatedFrom")
                        .WithMany()
                        .HasForeignKey("CreatedFromId");

                    b.HasOne("HEAppE.DomainObjects.JobManagement.Project", "Project")
                        .WithMany("CommandTemplates")
                        .HasForeignKey("ProjectId");

                    b.Navigation("ClusterNodeType");

                    b.Navigation("CreatedFrom");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.CommandTemplateParameter", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.JobManagement.CommandTemplate", "CommandTemplate")
                        .WithMany("TemplateParameters")
                        .HasForeignKey("CommandTemplateId");

                    b.Navigation("CommandTemplate");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.CommandTemplateParameterValue", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.JobManagement.TaskSpecification", null)
                        .WithMany("CommandParameterValues")
                        .HasForeignKey("TaskSpecificationId");

                    b.HasOne("HEAppE.DomainObjects.JobManagement.CommandTemplateParameter", "TemplateParameter")
                        .WithMany()
                        .HasForeignKey("TemplateParameterId");

                    b.Navigation("TemplateParameter");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.EnvironmentVariable", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.JobManagement.JobSpecification", null)
                        .WithMany("EnvironmentVariables")
                        .HasForeignKey("JobSpecificationId");

                    b.HasOne("HEAppE.DomainObjects.JobManagement.TaskSpecification", null)
                        .WithMany("EnvironmentVariables")
                        .HasForeignKey("TaskSpecificationId");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.JobInformation.SubmittedJobInfo", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.JobManagement.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("HEAppE.DomainObjects.JobManagement.JobSpecification", "Specification")
                        .WithMany()
                        .HasForeignKey("SpecificationId");

                    b.HasOne("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUser", "Submitter")
                        .WithMany()
                        .HasForeignKey("SubmitterId");

                    b.Navigation("Project");

                    b.Navigation("Specification");

                    b.Navigation("Submitter");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.JobInformation.SubmittedTaskAllocationNodeInfo", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.JobManagement.JobInformation.SubmittedTaskInfo", "SubmittedTask")
                        .WithMany("TaskAllocationNodes")
                        .HasForeignKey("SubmittedTaskInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubmittedTask");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.JobInformation.SubmittedTaskInfo", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.ClusterInformation.ClusterNodeType", "NodeType")
                        .WithMany()
                        .HasForeignKey("NodeTypeId");

                    b.HasOne("HEAppE.DomainObjects.JobManagement.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("HEAppE.DomainObjects.JobManagement.TaskSpecification", "Specification")
                        .WithMany()
                        .HasForeignKey("SpecificationId");

                    b.HasOne("HEAppE.DomainObjects.JobManagement.JobInformation.SubmittedJobInfo", null)
                        .WithMany("Tasks")
                        .HasForeignKey("SubmittedJobInfoId");

                    b.Navigation("NodeType");

                    b.Navigation("Project");

                    b.Navigation("Specification");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.JobSpecification", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.ClusterInformation.Cluster", "Cluster")
                        .WithMany()
                        .HasForeignKey("ClusterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HEAppE.DomainObjects.ClusterInformation.ClusterAuthenticationCredentials", "ClusterUser")
                        .WithMany()
                        .HasForeignKey("ClusterUserId");

                    b.HasOne("HEAppE.DomainObjects.FileTransfer.FileTransferMethod", "FileTransferMethod")
                        .WithMany()
                        .HasForeignKey("FileTransferMethodId");

                    b.HasOne("HEAppE.DomainObjects.JobManagement.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HEAppE.DomainObjects.JobManagement.SubProject", "SubProject")
                        .WithMany("JobSpecifications")
                        .HasForeignKey("SubProjectId");

                    b.HasOne("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUserGroup", "SubmitterGroup")
                        .WithMany()
                        .HasForeignKey("SubmitterGroupId");

                    b.HasOne("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUser", "Submitter")
                        .WithMany()
                        .HasForeignKey("SubmitterId");

                    b.Navigation("Cluster");

                    b.Navigation("ClusterUser");

                    b.Navigation("FileTransferMethod");

                    b.Navigation("Project");

                    b.Navigation("SubProject");

                    b.Navigation("Submitter");

                    b.Navigation("SubmitterGroup");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.ProjectContact", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.JobManagement.Contact", "Contact")
                        .WithMany("ProjectContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HEAppE.DomainObjects.JobManagement.Project", "Project")
                        .WithMany("ProjectContacts")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.SubProject", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.JobManagement.Project", "Project")
                        .WithMany("SubProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.TaskDependency", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.JobManagement.TaskSpecification", "ParentTaskSpecification")
                        .WithMany("Depended")
                        .HasForeignKey("ParentTaskSpecificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HEAppE.DomainObjects.JobManagement.TaskSpecification", "TaskSpecification")
                        .WithMany("DependsOn")
                        .HasForeignKey("TaskSpecificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ParentTaskSpecification");

                    b.Navigation("TaskSpecification");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.TaskParalizationSpecification", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.JobManagement.TaskSpecification", null)
                        .WithMany("TaskParalizationSpecifications")
                        .HasForeignKey("TaskSpecificationId");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.TaskSpecification", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.ClusterInformation.ClusterNodeType", "ClusterNodeType")
                        .WithMany()
                        .HasForeignKey("ClusterNodeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HEAppE.DomainObjects.JobManagement.CommandTemplate", "CommandTemplate")
                        .WithMany()
                        .HasForeignKey("CommandTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HEAppE.DomainObjects.JobManagement.JobSpecification", "JobSpecification")
                        .WithMany("Tasks")
                        .HasForeignKey("JobSpecificationId");

                    b.HasOne("HEAppE.DomainObjects.FileTransfer.FileSpecification", "LogFile")
                        .WithMany()
                        .HasForeignKey("LogFileId");

                    b.HasOne("HEAppE.DomainObjects.FileTransfer.FileSpecification", "ProgressFile")
                        .WithMany()
                        .HasForeignKey("ProgressFileId");

                    b.HasOne("HEAppE.DomainObjects.JobManagement.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.Navigation("ClusterNodeType");

                    b.Navigation("CommandTemplate");

                    b.Navigation("JobSpecification");

                    b.Navigation("LogFile");

                    b.Navigation("ProgressFile");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.TaskSpecificationRequiredNode", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.JobManagement.TaskSpecification", null)
                        .WithMany("RequiredNodes")
                        .HasForeignKey("TaskSpecificationId");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackAuthenticationCredentialDomain", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.OpenStack.OpenStackAuthenticationCredential", "OpenStackAuthenticationCredential")
                        .WithMany("OpenStackAuthenticationCredentialDomains")
                        .HasForeignKey("OpenStackAuthenticationCredentialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HEAppE.DomainObjects.OpenStack.OpenStackDomain", "OpenStackDomain")
                        .WithMany("OpenStackAuthenticationCredentialDomains")
                        .HasForeignKey("OpenStackDomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OpenStackAuthenticationCredential");

                    b.Navigation("OpenStackDomain");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackAuthenticationCredentialProject", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.OpenStack.OpenStackAuthenticationCredential", "OpenStackAuthenticationCredential")
                        .WithMany("OpenStackAuthenticationCredentialProjects")
                        .HasForeignKey("OpenStackAuthenticationCredentialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HEAppE.DomainObjects.OpenStack.OpenStackProject", "OpenStackProject")
                        .WithMany("OpenStackAuthenticationCredentialProjects")
                        .HasForeignKey("OpenStackProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OpenStackAuthenticationCredential");

                    b.Navigation("OpenStackProject");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackDomain", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.OpenStack.OpenStackInstance", "OpenStackInstance")
                        .WithMany("OpenStackDomains")
                        .HasForeignKey("OpenStackInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OpenStackInstance");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackProject", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUserGroup", "AdaptorUserGroup")
                        .WithMany()
                        .HasForeignKey("AdaptorUserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HEAppE.DomainObjects.OpenStack.OpenStackDomain", "OpenStackDomain")
                        .WithMany("OpenStackProjects")
                        .HasForeignKey("OpenStackDomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HEAppE.DomainObjects.OpenStack.OpenStackProjectDomain", "OpenStackProjectDomain")
                        .WithMany()
                        .HasForeignKey("OpenStackProjectDomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdaptorUserGroup");

                    b.Navigation("OpenStackDomain");

                    b.Navigation("OpenStackProjectDomain");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUserGroup", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.JobManagement.Project", "Project")
                        .WithMany("AdaptorUserGroups")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUserUserGroupRole", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUserGroup", "AdaptorUserGroup")
                        .WithMany("AdaptorUserUserGroupRoles")
                        .HasForeignKey("AdaptorUserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUser", "AdaptorUser")
                        .WithMany("AdaptorUserUserGroupRoles")
                        .HasForeignKey("AdaptorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUserRole", "AdaptorUserRole")
                        .WithMany("AdaptorUserUserGroupRoles")
                        .HasForeignKey("AdaptorUserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdaptorUser");

                    b.Navigation("AdaptorUserGroup");

                    b.Navigation("AdaptorUserRole");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.OpenStackSession", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.SessionCode", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.ClusterInformation.Cluster", b =>
                {
                    b.Navigation("ClusterProjects");

                    b.Navigation("FileTransferMethods");

                    b.Navigation("NodeTypes");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.ClusterInformation.ClusterAuthenticationCredentials", b =>
                {
                    b.Navigation("ClusterProjectCredentials");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.ClusterInformation.ClusterNodeType", b =>
                {
                    b.Navigation("PossibleCommands");

                    b.Navigation("RequestedNodeGroups");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.ClusterProject", b =>
                {
                    b.Navigation("ClusterProjectCredentials");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.CommandTemplate", b =>
                {
                    b.Navigation("TemplateParameters");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.Contact", b =>
                {
                    b.Navigation("ProjectContacts");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.JobInformation.SubmittedJobInfo", b =>
                {
                    b.Navigation("FileTransferTemporaryKeys");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.JobInformation.SubmittedTaskInfo", b =>
                {
                    b.Navigation("TaskAllocationNodes");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.JobSpecification", b =>
                {
                    b.Navigation("EnvironmentVariables");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.Project", b =>
                {
                    b.Navigation("AdaptorUserGroups");

                    b.Navigation("ClusterProjects");

                    b.Navigation("CommandTemplates");

                    b.Navigation("ProjectContacts");

                    b.Navigation("SubProjects");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.SubProject", b =>
                {
                    b.Navigation("JobSpecifications");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.TaskSpecification", b =>
                {
                    b.Navigation("CommandParameterValues");

                    b.Navigation("Depended");

                    b.Navigation("DependsOn");

                    b.Navigation("EnvironmentVariables");

                    b.Navigation("RequiredNodes");

                    b.Navigation("TaskParalizationSpecifications");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackAuthenticationCredential", b =>
                {
                    b.Navigation("OpenStackAuthenticationCredentialDomains");

                    b.Navigation("OpenStackAuthenticationCredentialProjects");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackDomain", b =>
                {
                    b.Navigation("OpenStackAuthenticationCredentialDomains");

                    b.Navigation("OpenStackProjects");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackInstance", b =>
                {
                    b.Navigation("OpenStackDomains");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackProject", b =>
                {
                    b.Navigation("OpenStackAuthenticationCredentialProjects");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUser", b =>
                {
                    b.Navigation("AdaptorUserUserGroupRoles");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUserGroup", b =>
                {
                    b.Navigation("AdaptorUserUserGroupRoles");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUserRole", b =>
                {
                    b.Navigation("AdaptorUserUserGroupRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
