// <auto-generated />
using System;
using HEAppE.DataAccessTier;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HEAppE.DataAccessTier.Migrations
{
    [DbContext(typeof(MiddlewareContext))]
    partial class MiddlewareContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("HEAppE.DomainObjects.ClusterInformation.Cluster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<int>("ConnectionProtocol")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LocalBasepath")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MasterNodeName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Port")
                        .HasColumnType("int");

                    b.Property<int>("SchedulerType")
                        .HasColumnType("int");

                    b.Property<long?>("ServiceAccountCredentialsId")
                        .HasColumnType("bigint");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool?>("UpdateJobStateByServiceAccount")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ServiceAccountCredentialsId");

                    b.ToTable("Cluster");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.ClusterInformation.ClusterAuthenticationCredentials", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<int>("AuthenticationType")
                        .HasColumnType("int");

                    b.Property<long?>("ClusterId")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrivateKeyFile")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PrivateKeyPassword")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId");

                    b.ToTable("ClusterAuthenticationCredentials");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.ClusterInformation.ClusterNodeType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("ClusterAllocationName")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long?>("ClusterId")
                        .HasColumnType("bigint");

                    b.Property<int>("CoresPerNode")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("FileTransferMethodId")
                        .HasColumnType("bigint");

                    b.Property<long?>("JobTemplateId")
                        .HasColumnType("bigint");

                    b.Property<int?>("MaxWalltime")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("NumberOfNodes")
                        .HasColumnType("int");

                    b.Property<string>("Queue")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<long?>("TaskTemplateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId");

                    b.HasIndex("FileTransferMethodId");

                    b.HasIndex("JobTemplateId");

                    b.HasIndex("TaskTemplateId");

                    b.ToTable("ClusterNodeType");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.ClusterInformation.ClusterNodeTypeRequestedGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("ClusterNodeTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClusterNodeTypeId");

                    b.ToTable("ClusterNodeTypeRequestedGroup");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.FileTransfer.FileSpecification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<int>("NameSpecification")
                        .HasColumnType("int");

                    b.Property<string>("RelativePath")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SynchronizationType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FileSpecification");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.FileTransfer.FileTransferMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("ClusterId")
                        .HasColumnType("bigint");

                    b.Property<int>("Protocol")
                        .HasColumnType("int");

                    b.Property<string>("ServerHostname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId");

                    b.ToTable("FileTransferMethod");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.CommandTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("ClusterNodeTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CommandParameters")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ExecutableFile")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsGeneric")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PreparationScript")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ClusterNodeTypeId");

                    b.ToTable("CommandTemplate");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.CommandTemplateParameter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("CommandTemplateId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CommandTemplateId");

                    b.ToTable("CommandTemplateParameter");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.CommandTemplateParameterValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("TaskSpecificationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TemplateParameterId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("TaskSpecificationId");

                    b.HasIndex("TemplateParameterId");

                    b.ToTable("CommandTemplateParameterValue");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.EnvironmentVariable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("JobSpecificationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("JobTemplateId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("TaskSpecificationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TaskTemplateId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("JobSpecificationId");

                    b.HasIndex("JobTemplateId");

                    b.HasIndex("TaskSpecificationId");

                    b.HasIndex("TaskTemplateId");

                    b.ToTable("EnvironmentVariable");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.JobInformation.SubmittedJobInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Project")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("SpecificationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SubmitTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SubmitterId")
                        .HasColumnType("bigint");

                    b.Property<double?>("TotalAllocatedTime")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("SpecificationId");

                    b.HasIndex("SubmitterId");

                    b.ToTable("SubmittedJobInfo");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.JobInformation.SubmittedTaskAllocationNodeInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("AllocationNodeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("SubmittedTaskInfoId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SubmittedTaskInfoId");

                    b.ToTable("SubmittedTaskAllocationNodeInfo");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.JobInformation.SubmittedTaskInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("AllParameters")
                        .HasColumnType("text");

                    b.Property<double?>("AllocatedTime")
                        .HasColumnType("float");

                    b.Property<bool?>("CpuHyperThreading")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("NodeTypeId")
                        .HasColumnType("bigint");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("ScheduledJobId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SpecificationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<long?>("SubmittedJobInfoId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NodeTypeId");

                    b.HasIndex("SpecificationId");

                    b.HasIndex("SubmittedJobInfoId");

                    b.ToTable("SubmittedTaskInfo");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.JobSpecification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("ClusterId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ClusterUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FileTransferMethodId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NotificationEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("NotifyOnAbort")
                        .HasColumnType("bit");

                    b.Property<bool?>("NotifyOnFinish")
                        .HasColumnType("bit");

                    b.Property<bool?>("NotifyOnStart")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Project")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("SubmitterGroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SubmitterId")
                        .HasColumnType("bigint");

                    b.Property<int?>("WaitingLimit")
                        .HasColumnType("int");

                    b.Property<int?>("WalltimeLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId");

                    b.HasIndex("ClusterUserId");

                    b.HasIndex("FileTransferMethodId");

                    b.HasIndex("SubmitterGroupId");

                    b.HasIndex("SubmitterId");

                    b.ToTable("JobSpecification");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.JobTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Project")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("WalltimeLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("JobTemplate");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.PropertyChangeSpecification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<int>("ChangeMethod")
                        .HasColumnType("int");

                    b.Property<long?>("JobTemplateId")
                        .HasColumnType("bigint");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<long?>("TaskTemplateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("JobTemplateId");

                    b.HasIndex("TaskTemplateId");

                    b.ToTable("PropertyChangeSpecification");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.TaskDependency", b =>
                {
                    b.Property<long>("TaskSpecificationId")
                        .HasColumnType("bigint");

                    b.Property<long>("ParentTaskSpecificationId")
                        .HasColumnType("bigint");

                    b.HasKey("TaskSpecificationId", "ParentTaskSpecificationId");

                    b.HasIndex("ParentTaskSpecificationId");

                    b.ToTable("TaskDependency");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.TaskParalizationSpecification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<int?>("MPIProcesses")
                        .HasColumnType("int");

                    b.Property<int>("MaxCores")
                        .HasColumnType("int");

                    b.Property<int?>("OpenMPThreads")
                        .HasColumnType("int");

                    b.Property<long?>("TaskSpecificationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TaskSpecificationId");

                    b.ToTable("TaskParalizationSpecification");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.TaskSpecification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("ClusterNodeTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("ClusterTaskSubdirectory")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("CommandTemplateId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("CpuHyperThreading")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExclusive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRerunnable")
                        .HasColumnType("bit");

                    b.Property<string>("JobArrays")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long?>("JobSpecificationId")
                        .HasColumnType("bigint");

                    b.Property<string>("LocalDirectory")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("LogFileId")
                        .HasColumnType("bigint");

                    b.Property<int?>("MaxCores")
                        .HasColumnType("int");

                    b.Property<int?>("MinCores")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PlacementPolicy")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<long?>("ProgressFileId")
                        .HasColumnType("bigint");

                    b.Property<string>("Project")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StandardErrorFile")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("StandardInputFile")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("StandardOutputFile")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("WalltimeLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClusterNodeTypeId");

                    b.HasIndex("CommandTemplateId");

                    b.HasIndex("JobSpecificationId");

                    b.HasIndex("LogFileId");

                    b.HasIndex("ProgressFileId");

                    b.ToTable("TaskSpecification");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.TaskSpecificationRequiredNode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("NodeName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long?>("TaskSpecificationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TaskSpecificationId");

                    b.ToTable("TaskSpecificationRequiredNode");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.TaskTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<int?>("MaxCores")
                        .HasColumnType("int");

                    b.Property<int?>("MinCores")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Project")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("WalltimeLimit")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TaskTemplate");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.Notifications.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.Notifications.MessageLocalization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("LocalizedHeader")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocalizedText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("MessageTemplateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MessageTemplateId");

                    b.ToTable("MessageLocalization");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.Notifications.MessageTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Event")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MessageTemplate");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.Notifications.MessageTemplateParameter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<long?>("MessageTemplateId")
                        .HasColumnType("bigint");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("MessageTemplateId");

                    b.ToTable("MessageTemplateParameter");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.Notifications.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MessageTemplateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("OccurrenceTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("SentTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MessageTemplateId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackAuthenticationCredential", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("OpenStackAuthenticationCredential");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackAuthenticationCredentialDomain", b =>
                {
                    b.Property<long>("OpenStackAuthenticationCredentialId")
                        .HasColumnType("bigint");

                    b.Property<long>("OpenStackDomainId")
                        .HasColumnType("bigint");

                    b.HasKey("OpenStackAuthenticationCredentialId", "OpenStackDomainId");

                    b.HasIndex("OpenStackDomainId");

                    b.ToTable("OpenStackAuthenticationCredentialDomain");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackAuthenticationCredentialProjectDomain", b =>
                {
                    b.Property<long>("OpenStackAuthenticationCredentialId")
                        .HasColumnType("bigint");

                    b.Property<long>("OpenStackProjectDomainId")
                        .HasColumnType("bigint");

                    b.HasKey("OpenStackAuthenticationCredentialId", "OpenStackProjectDomainId");

                    b.HasIndex("OpenStackProjectDomainId");

                    b.ToTable("OpenStackAuthenticationCredentialProjectDomain");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackDomain", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long>("OpenStackInstanceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OpenStackInstanceId");

                    b.ToTable("OpenStackDomain");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackInstance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("InstanceUrl")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("OpenStackInstance");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackProject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long>("OpenStackDomainId")
                        .HasColumnType("bigint");

                    b.Property<string>("UID")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("OpenStackDomainId");

                    b.ToTable("OpenStackProject");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackProjectDomain", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<long>("OpenStackProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("UID")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("OpenStackProjectId");

                    b.ToTable("OpenStackProjectDomain");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PublicKey")
                        .HasColumnType("text");

                    b.Property<bool>("Synchronize")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("AdaptorUser");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUserGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("AccountingString")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AdaptorUserGroup");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("AdaptorUserRole");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUserUserGroup", b =>
                {
                    b.Property<long>("AdaptorUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("AdaptorUserGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("AdaptorUserId", "AdaptorUserGroupId");

                    b.HasIndex("AdaptorUserGroupId");

                    b.ToTable("AdaptorUserUserGroup");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUserUserRole", b =>
                {
                    b.Property<long>("AdaptorUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("AdaptorUserRoleId")
                        .HasColumnType("bigint");

                    b.HasKey("AdaptorUserId", "AdaptorUserRoleId");

                    b.HasIndex("AdaptorUserRoleId");

                    b.ToTable("AdaptorUserUserRole");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.OpenStackSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("ApplicationCredentialsId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationCredentialsSecret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuthenticationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OpenStackSession");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.ResourceLimitation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long?>("AdaptorUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("MaxCoresPerJob")
                        .HasColumnType("int");

                    b.Property<long?>("NodeTypeId")
                        .HasColumnType("bigint");

                    b.Property<int?>("TotalMaxCores")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdaptorUserId");

                    b.HasIndex("NodeTypeId");

                    b.ToTable("ResourceLimitation");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.SessionCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime>("AuthenticationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastAccessTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UniqueCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SessionCode");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.ClusterInformation.Cluster", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.ClusterInformation.ClusterAuthenticationCredentials", "ServiceAccountCredentials")
                        .WithMany()
                        .HasForeignKey("ServiceAccountCredentialsId");

                    b.Navigation("ServiceAccountCredentials");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.ClusterInformation.ClusterAuthenticationCredentials", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.ClusterInformation.Cluster", "Cluster")
                        .WithMany("AuthenticationCredentials")
                        .HasForeignKey("ClusterId");

                    b.Navigation("Cluster");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.ClusterInformation.ClusterNodeType", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.ClusterInformation.Cluster", "Cluster")
                        .WithMany("NodeTypes")
                        .HasForeignKey("ClusterId");

                    b.HasOne("HEAppE.DomainObjects.FileTransfer.FileTransferMethod", "FileTransferMethod")
                        .WithMany()
                        .HasForeignKey("FileTransferMethodId");

                    b.HasOne("HEAppE.DomainObjects.JobManagement.JobTemplate", "JobTemplate")
                        .WithMany()
                        .HasForeignKey("JobTemplateId");

                    b.HasOne("HEAppE.DomainObjects.JobManagement.TaskTemplate", "TaskTemplate")
                        .WithMany()
                        .HasForeignKey("TaskTemplateId");

                    b.Navigation("Cluster");

                    b.Navigation("FileTransferMethod");

                    b.Navigation("JobTemplate");

                    b.Navigation("TaskTemplate");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.ClusterInformation.ClusterNodeTypeRequestedGroup", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.ClusterInformation.ClusterNodeType", null)
                        .WithMany("RequestedNodeGroups")
                        .HasForeignKey("ClusterNodeTypeId");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.FileTransfer.FileTransferMethod", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.ClusterInformation.Cluster", "Cluster")
                        .WithMany("FileTransferMethods")
                        .HasForeignKey("ClusterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cluster");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.CommandTemplate", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.ClusterInformation.ClusterNodeType", "ClusterNodeType")
                        .WithMany("PossibleCommands")
                        .HasForeignKey("ClusterNodeTypeId");

                    b.Navigation("ClusterNodeType");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.CommandTemplateParameter", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.JobManagement.CommandTemplate", "CommandTemplate")
                        .WithMany("TemplateParameters")
                        .HasForeignKey("CommandTemplateId");

                    b.Navigation("CommandTemplate");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.CommandTemplateParameterValue", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.JobManagement.TaskSpecification", null)
                        .WithMany("CommandParameterValues")
                        .HasForeignKey("TaskSpecificationId");

                    b.HasOne("HEAppE.DomainObjects.JobManagement.CommandTemplateParameter", "TemplateParameter")
                        .WithMany()
                        .HasForeignKey("TemplateParameterId");

                    b.Navigation("TemplateParameter");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.EnvironmentVariable", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.JobManagement.JobSpecification", null)
                        .WithMany("EnvironmentVariables")
                        .HasForeignKey("JobSpecificationId");

                    b.HasOne("HEAppE.DomainObjects.JobManagement.JobTemplate", null)
                        .WithMany("EnvironmentVariables")
                        .HasForeignKey("JobTemplateId");

                    b.HasOne("HEAppE.DomainObjects.JobManagement.TaskSpecification", null)
                        .WithMany("EnvironmentVariables")
                        .HasForeignKey("TaskSpecificationId");

                    b.HasOne("HEAppE.DomainObjects.JobManagement.TaskTemplate", null)
                        .WithMany("EnvironmentVariables")
                        .HasForeignKey("TaskTemplateId");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.JobInformation.SubmittedJobInfo", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.JobManagement.JobSpecification", "Specification")
                        .WithMany()
                        .HasForeignKey("SpecificationId");

                    b.HasOne("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUser", "Submitter")
                        .WithMany()
                        .HasForeignKey("SubmitterId");

                    b.Navigation("Specification");

                    b.Navigation("Submitter");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.JobInformation.SubmittedTaskAllocationNodeInfo", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.JobManagement.JobInformation.SubmittedTaskInfo", "SubmittedTask")
                        .WithMany("TaskAllocationNodes")
                        .HasForeignKey("SubmittedTaskInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubmittedTask");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.JobInformation.SubmittedTaskInfo", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.ClusterInformation.ClusterNodeType", "NodeType")
                        .WithMany()
                        .HasForeignKey("NodeTypeId");

                    b.HasOne("HEAppE.DomainObjects.JobManagement.TaskSpecification", "Specification")
                        .WithMany()
                        .HasForeignKey("SpecificationId");

                    b.HasOne("HEAppE.DomainObjects.JobManagement.JobInformation.SubmittedJobInfo", null)
                        .WithMany("Tasks")
                        .HasForeignKey("SubmittedJobInfoId");

                    b.Navigation("NodeType");

                    b.Navigation("Specification");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.JobSpecification", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.ClusterInformation.Cluster", "Cluster")
                        .WithMany()
                        .HasForeignKey("ClusterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HEAppE.DomainObjects.ClusterInformation.ClusterAuthenticationCredentials", "ClusterUser")
                        .WithMany()
                        .HasForeignKey("ClusterUserId");

                    b.HasOne("HEAppE.DomainObjects.FileTransfer.FileTransferMethod", "FileTransferMethod")
                        .WithMany()
                        .HasForeignKey("FileTransferMethodId");

                    b.HasOne("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUserGroup", "SubmitterGroup")
                        .WithMany()
                        .HasForeignKey("SubmitterGroupId");

                    b.HasOne("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUser", "Submitter")
                        .WithMany()
                        .HasForeignKey("SubmitterId");

                    b.Navigation("Cluster");

                    b.Navigation("ClusterUser");

                    b.Navigation("FileTransferMethod");

                    b.Navigation("Submitter");

                    b.Navigation("SubmitterGroup");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.PropertyChangeSpecification", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.JobManagement.JobTemplate", "JobTemplate")
                        .WithMany("PropertyChangeSpecification")
                        .HasForeignKey("JobTemplateId");

                    b.HasOne("HEAppE.DomainObjects.JobManagement.TaskTemplate", "TaskTemplate")
                        .WithMany("PropertyChangeSpecification")
                        .HasForeignKey("TaskTemplateId");

                    b.Navigation("JobTemplate");

                    b.Navigation("TaskTemplate");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.TaskDependency", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.JobManagement.TaskSpecification", "ParentTaskSpecification")
                        .WithMany("Depended")
                        .HasForeignKey("ParentTaskSpecificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HEAppE.DomainObjects.JobManagement.TaskSpecification", "TaskSpecification")
                        .WithMany("DependsOn")
                        .HasForeignKey("TaskSpecificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ParentTaskSpecification");

                    b.Navigation("TaskSpecification");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.TaskParalizationSpecification", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.JobManagement.TaskSpecification", null)
                        .WithMany("TaskParalizationSpecifications")
                        .HasForeignKey("TaskSpecificationId");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.TaskSpecification", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.ClusterInformation.ClusterNodeType", "ClusterNodeType")
                        .WithMany()
                        .HasForeignKey("ClusterNodeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HEAppE.DomainObjects.JobManagement.CommandTemplate", "CommandTemplate")
                        .WithMany()
                        .HasForeignKey("CommandTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HEAppE.DomainObjects.JobManagement.JobSpecification", "JobSpecification")
                        .WithMany("Tasks")
                        .HasForeignKey("JobSpecificationId");

                    b.HasOne("HEAppE.DomainObjects.FileTransfer.FileSpecification", "LogFile")
                        .WithMany()
                        .HasForeignKey("LogFileId");

                    b.HasOne("HEAppE.DomainObjects.FileTransfer.FileSpecification", "ProgressFile")
                        .WithMany()
                        .HasForeignKey("ProgressFileId");

                    b.Navigation("ClusterNodeType");

                    b.Navigation("CommandTemplate");

                    b.Navigation("JobSpecification");

                    b.Navigation("LogFile");

                    b.Navigation("ProgressFile");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.TaskSpecificationRequiredNode", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.JobManagement.TaskSpecification", null)
                        .WithMany("RequiredNodes")
                        .HasForeignKey("TaskSpecificationId");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.Notifications.MessageLocalization", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.Notifications.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("HEAppE.DomainObjects.Notifications.MessageTemplate", null)
                        .WithMany("Localizations")
                        .HasForeignKey("MessageTemplateId");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.Notifications.MessageTemplateParameter", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.Notifications.MessageTemplate", null)
                        .WithMany("Parameters")
                        .HasForeignKey("MessageTemplateId");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.Notifications.Notification", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.Notifications.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("HEAppE.DomainObjects.Notifications.MessageTemplate", "MessageTemplate")
                        .WithMany()
                        .HasForeignKey("MessageTemplateId");

                    b.Navigation("Language");

                    b.Navigation("MessageTemplate");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackAuthenticationCredentialDomain", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.OpenStack.OpenStackAuthenticationCredential", "OpenStackAuthenticationCredential")
                        .WithMany("OpenStackAuthenticationCredentialDomains")
                        .HasForeignKey("OpenStackAuthenticationCredentialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HEAppE.DomainObjects.OpenStack.OpenStackDomain", "OpenStackDomain")
                        .WithMany("OpenStackAuthenticationCredentialDomains")
                        .HasForeignKey("OpenStackDomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OpenStackAuthenticationCredential");

                    b.Navigation("OpenStackDomain");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackAuthenticationCredentialProjectDomain", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.OpenStack.OpenStackAuthenticationCredential", "OpenStackAuthenticationCredential")
                        .WithMany("OpenStackAuthenticationCredentialProjectDomains")
                        .HasForeignKey("OpenStackAuthenticationCredentialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HEAppE.DomainObjects.OpenStack.OpenStackProjectDomain", "OpenStackProjectDomain")
                        .WithMany("OpenStackAuthenticationCredentialProjectDomains")
                        .HasForeignKey("OpenStackProjectDomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OpenStackAuthenticationCredential");

                    b.Navigation("OpenStackProjectDomain");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackDomain", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.OpenStack.OpenStackInstance", "OpenStackInstance")
                        .WithMany("OpenStackDomains")
                        .HasForeignKey("OpenStackInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OpenStackInstance");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackProject", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.OpenStack.OpenStackDomain", "OpenStackDomain")
                        .WithMany("OpenStackProjects")
                        .HasForeignKey("OpenStackDomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OpenStackDomain");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackProjectDomain", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.OpenStack.OpenStackProject", "OpenStackProject")
                        .WithMany("OpenStackProjectDomains")
                        .HasForeignKey("OpenStackProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OpenStackProject");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUser", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.Notifications.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUserUserGroup", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUserGroup", "AdaptorUserGroup")
                        .WithMany("AdaptorUserUserGroups")
                        .HasForeignKey("AdaptorUserGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUser", "AdaptorUser")
                        .WithMany("AdaptorUserUserGroups")
                        .HasForeignKey("AdaptorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdaptorUser");

                    b.Navigation("AdaptorUserGroup");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUserUserRole", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUser", "AdaptorUser")
                        .WithMany("AdaptorUserUserRoles")
                        .HasForeignKey("AdaptorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUserRole", "AdaptorUserRole")
                        .WithMany("AdaptorUserUserRoles")
                        .HasForeignKey("AdaptorUserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdaptorUser");

                    b.Navigation("AdaptorUserRole");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.OpenStackSession", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.ResourceLimitation", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUser", null)
                        .WithMany("Limitations")
                        .HasForeignKey("AdaptorUserId");

                    b.HasOne("HEAppE.DomainObjects.ClusterInformation.ClusterNodeType", "NodeType")
                        .WithMany()
                        .HasForeignKey("NodeTypeId");

                    b.Navigation("NodeType");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.SessionCode", b =>
                {
                    b.HasOne("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.ClusterInformation.Cluster", b =>
                {
                    b.Navigation("AuthenticationCredentials");

                    b.Navigation("FileTransferMethods");

                    b.Navigation("NodeTypes");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.ClusterInformation.ClusterNodeType", b =>
                {
                    b.Navigation("PossibleCommands");

                    b.Navigation("RequestedNodeGroups");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.CommandTemplate", b =>
                {
                    b.Navigation("TemplateParameters");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.JobInformation.SubmittedJobInfo", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.JobInformation.SubmittedTaskInfo", b =>
                {
                    b.Navigation("TaskAllocationNodes");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.JobSpecification", b =>
                {
                    b.Navigation("EnvironmentVariables");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.JobTemplate", b =>
                {
                    b.Navigation("EnvironmentVariables");

                    b.Navigation("PropertyChangeSpecification");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.TaskSpecification", b =>
                {
                    b.Navigation("CommandParameterValues");

                    b.Navigation("Depended");

                    b.Navigation("DependsOn");

                    b.Navigation("EnvironmentVariables");

                    b.Navigation("RequiredNodes");

                    b.Navigation("TaskParalizationSpecifications");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.JobManagement.TaskTemplate", b =>
                {
                    b.Navigation("EnvironmentVariables");

                    b.Navigation("PropertyChangeSpecification");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.Notifications.MessageTemplate", b =>
                {
                    b.Navigation("Localizations");

                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackAuthenticationCredential", b =>
                {
                    b.Navigation("OpenStackAuthenticationCredentialDomains");

                    b.Navigation("OpenStackAuthenticationCredentialProjectDomains");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackDomain", b =>
                {
                    b.Navigation("OpenStackAuthenticationCredentialDomains");

                    b.Navigation("OpenStackProjects");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackInstance", b =>
                {
                    b.Navigation("OpenStackDomains");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackProject", b =>
                {
                    b.Navigation("OpenStackProjectDomains");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.OpenStack.OpenStackProjectDomain", b =>
                {
                    b.Navigation("OpenStackAuthenticationCredentialProjectDomains");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUser", b =>
                {
                    b.Navigation("AdaptorUserUserGroups");

                    b.Navigation("AdaptorUserUserRoles");

                    b.Navigation("Limitations");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUserGroup", b =>
                {
                    b.Navigation("AdaptorUserUserGroups");
                });

            modelBuilder.Entity("HEAppE.DomainObjects.UserAndLimitationManagement.AdaptorUserRole", b =>
                {
                    b.Navigation("AdaptorUserUserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
