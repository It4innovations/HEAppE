// <auto-generated />
using System;
using HEAppE.DataAccessTier;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HEAppE.DataAccessTier.Migrations
{
    [DbContext(typeof(MiddlewareContextMigration))]
    [Migration("20200911093023_TaskSpecModified")]
    partial class TaskSpecModified
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.AdminUserManagement.AdministrationRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("AdministrationRole");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.AdminUserManagement.AdministrationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<bool>("Deleted");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long?>("LanguageId");

                    b.Property<DateTime>("LastModificationTime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("AdministrationUser");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.AdminUserManagement.AdministrationUserRole", b =>
                {
                    b.Property<long>("AdministrationRoleId");

                    b.Property<long>("AdministrationUserId");

                    b.HasKey("AdministrationRoleId", "AdministrationUserId");

                    b.HasIndex("AdministrationUserId");

                    b.ToTable("AdministrationUserRole");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.ClusterInformation.Cluster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConnectionProtocol");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("LocalBasepath")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("MasterNodeName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SchedulerType");

                    b.Property<long?>("ServiceAccountCredentialsId");

                    b.HasKey("Id");

                    b.HasIndex("ServiceAccountCredentialsId");

                    b.ToTable("Cluster");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.ClusterInformation.ClusterAuthenticationCredentials", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ClusterId");

                    b.Property<string>("Password")
                        .HasMaxLength(50);

                    b.Property<string>("PrivateKeyFile")
                        .HasMaxLength(200);

                    b.Property<string>("PrivateKeyPassword")
                        .HasMaxLength(50);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ClusterId");

                    b.ToTable("ClusterAuthenticationCredentials");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.ClusterInformation.ClusterNodeType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ClusterId");

                    b.Property<int>("CoresPerNode");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long?>("FileTransferMethodId");

                    b.Property<long?>("JobTemplateId");

                    b.Property<int?>("MaxWalltime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("NumberOfNodes");

                    b.Property<string>("Queue")
                        .HasMaxLength(30);

                    b.Property<string>("RequestedNodeGroups")
                        .HasMaxLength(500);

                    b.Property<long?>("TaskTemplateId");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId");

                    b.HasIndex("FileTransferMethodId");

                    b.HasIndex("JobTemplateId");

                    b.HasIndex("TaskTemplateId");

                    b.ToTable("ClusterNodeType");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.FileTransfer.FileSpecification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NameSpecification");

                    b.Property<string>("RelativePath")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("SynchronizationType");

                    b.HasKey("Id");

                    b.ToTable("FileSpecification");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.FileTransfer.FileTransferMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Protocol");

                    b.Property<string>("ServerHostname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("SharedBasepath")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("FileTransferMethod");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.JobManagement.CommandTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ClusterNodeTypeId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("CommandParameters")
                        .HasMaxLength(200);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ExecutableFile")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("PreparationScript")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("ClusterNodeTypeId");

                    b.ToTable("CommandTemplate");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.JobManagement.CommandTemplateParameter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CommandTemplateId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("CommandTemplateId");

                    b.ToTable("CommandTemplateParameter");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.JobManagement.CommandTemplateParameterValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("TaskSpecificationId");

                    b.Property<long?>("TemplateParameterId");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("TaskSpecificationId");

                    b.HasIndex("TemplateParameterId");

                    b.ToTable("CommandTemplateParameterValue");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.JobManagement.EnvironmentVariable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("JobSpecificationId");

                    b.Property<long?>("JobTemplateId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long?>("TaskSpecificationId");

                    b.Property<long?>("TaskTemplateId");

                    b.Property<string>("Value")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("JobSpecificationId");

                    b.HasIndex("JobTemplateId");

                    b.HasIndex("TaskSpecificationId");

                    b.HasIndex("TaskTemplateId");

                    b.ToTable("EnvironmentVariable");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.JobManagement.JobInformation.SubmittedJobInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationTime");

                    b.Property<DateTime?>("EndTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Project")
                        .HasMaxLength(50);

                    b.Property<long?>("SpecificationId");

                    b.Property<DateTime?>("StartTime");

                    b.Property<int>("State");

                    b.Property<DateTime?>("SubmitTime");

                    b.Property<long?>("SubmitterId");

                    b.Property<double?>("TotalAllocatedTime");

                    b.HasKey("Id");

                    b.HasIndex("SpecificationId");

                    b.HasIndex("SubmitterId");

                    b.ToTable("SubmittedJobInfo");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.JobManagement.JobInformation.SubmittedTaskInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AllParameters")
                        .HasColumnType("text");

                    b.Property<string>("AllocatedCoreIds");

                    b.Property<double?>("AllocatedTime");

                    b.Property<bool?>("CpuHyperThreading");

                    b.Property<DateTime?>("EndTime");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long?>("NodeTypeId");

                    b.Property<int>("Priority");

                    b.Property<string>("ScheduledJobId");

                    b.Property<long?>("SpecificationId");

                    b.Property<DateTime?>("StartTime");

                    b.Property<int>("State");

                    b.Property<long?>("SubmittedJobInfoId");

                    b.HasKey("Id");

                    b.HasIndex("NodeTypeId");

                    b.HasIndex("SpecificationId");

                    b.HasIndex("SubmittedJobInfoId");

                    b.ToTable("SubmittedTaskInfo");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.JobManagement.JobSpecification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ClusterId");

                    b.Property<long?>("ClusterUserId");

                    b.Property<long?>("FileTransferMethodId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("NotificationEmail")
                        .HasMaxLength(50);

                    b.Property<bool?>("NotifyOnAbort");

                    b.Property<bool?>("NotifyOnFinish");

                    b.Property<bool?>("NotifyOnStart");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20);

                    b.Property<string>("Project")
                        .HasMaxLength(50);

                    b.Property<long?>("SubmitterGroupId");

                    b.Property<long?>("SubmitterId");

                    b.Property<int?>("WaitingLimit");

                    b.Property<int?>("WalltimeLimit");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId");

                    b.HasIndex("ClusterUserId");

                    b.HasIndex("FileTransferMethodId");

                    b.HasIndex("SubmitterGroupId");

                    b.HasIndex("SubmitterId");

                    b.ToTable("JobSpecification");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.JobManagement.JobTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Project")
                        .HasMaxLength(50);

                    b.Property<int?>("WalltimeLimit");

                    b.HasKey("Id");

                    b.ToTable("JobTemplate");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.JobManagement.PropertyChangeSpecification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChangeMethod");

                    b.Property<long?>("JobTemplateId");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<long?>("TaskTemplateId");

                    b.HasKey("Id");

                    b.HasIndex("JobTemplateId");

                    b.HasIndex("TaskTemplateId");

                    b.ToTable("PropertyChangeSpecification");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.JobManagement.TaskDependency", b =>
                {
                    b.Property<long>("TaskSpecificationId");

                    b.Property<long>("ParentTaskSpecificationId");

                    b.HasKey("TaskSpecificationId", "ParentTaskSpecificationId");

                    b.HasIndex("ParentTaskSpecificationId");

                    b.ToTable("TaskDependency");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.JobManagement.TaskSpecification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClusterTaskSubdirectory")
                        .HasMaxLength(50);

                    b.Property<long?>("CommandTemplateId");

                    b.Property<bool?>("CpuHyperThreading");

                    b.Property<bool>("IsExclusive");

                    b.Property<bool>("IsRerunnable");

                    b.Property<string>("JobArrays")
                        .HasMaxLength(500);

                    b.Property<long?>("JobSpecificationId");

                    b.Property<string>("LocalDirectory")
                        .HasMaxLength(200);

                    b.Property<long?>("LogFileId");

                    b.Property<int?>("MaxCores");

                    b.Property<int?>("MinCores");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long?>("NodeTypeId");

                    b.Property<int?>("Priority");

                    b.Property<long?>("ProgressFileId");

                    b.Property<string>("Project")
                        .HasMaxLength(50);

                    b.Property<string>("RequiredNodes")
                        .HasMaxLength(500);

                    b.Property<string>("StandardErrorFile")
                        .HasMaxLength(30);

                    b.Property<string>("StandardInputFile")
                        .HasMaxLength(30);

                    b.Property<string>("StandardOutputFile")
                        .HasMaxLength(30);

                    b.Property<int?>("WalltimeLimit");

                    b.HasKey("Id");

                    b.HasIndex("CommandTemplateId");

                    b.HasIndex("JobSpecificationId");

                    b.HasIndex("LogFileId");

                    b.HasIndex("NodeTypeId");

                    b.HasIndex("ProgressFileId");

                    b.ToTable("TaskSpecification");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.JobManagement.TaskTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MaxCores");

                    b.Property<int?>("MinCores");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("Priority");

                    b.Property<string>("Project")
                        .HasMaxLength(50);

                    b.Property<int?>("WalltimeLimit");

                    b.HasKey("Id");

                    b.ToTable("TaskTemplate");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.Notifications.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.Notifications.MessageLocalization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("LanguageId");

                    b.Property<string>("LocalizedHeader")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("LocalizedText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("MessageTemplateId");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MessageTemplateId");

                    b.ToTable("MessageLocalization");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.Notifications.MessageTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("Event");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("MessageTemplate");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.Notifications.MessageTemplateParameter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<long?>("MessageTemplateId");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("MessageTemplateId");

                    b.ToTable("MessageTemplateParameter");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.Notifications.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("LanguageId");

                    b.Property<long?>("MessageTemplateId");

                    b.Property<DateTime>("OccurrenceTime");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("SentTime");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MessageTemplateId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.OpenStack.OpenStackAuthenticationCredentials", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("OpenStackInstanceId");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("OpenStackInstanceId");

                    b.ToTable("OpenStackAuthenticationCredentials");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.OpenStack.OpenStackInstance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(70);

                    b.Property<string>("InstanceUrl")
                        .IsRequired()
                        .HasMaxLength(70);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("OpenStackInstance");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.UserAndLimitationManagement.AdaptorUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted");

                    b.Property<long?>("LanguageId");

                    b.Property<string>("Password")
                        .HasMaxLength(50);

                    b.Property<string>("PublicKey")
                        .HasColumnType("text");

                    b.Property<bool>("Synchronize");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("AdaptorUser");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.UserAndLimitationManagement.AdaptorUserGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountingString")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("AdaptorUserGroup");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.UserAndLimitationManagement.AdaptorUserRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("AdaptorUserRole");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.UserAndLimitationManagement.AdaptorUserUserGroup", b =>
                {
                    b.Property<long>("AdaptorUserId");

                    b.Property<long>("AdaptorUserGroupId");

                    b.HasKey("AdaptorUserId", "AdaptorUserGroupId");

                    b.HasIndex("AdaptorUserGroupId");

                    b.ToTable("AdaptorUserUserGroup");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.UserAndLimitationManagement.AdaptorUserUserRole", b =>
                {
                    b.Property<long>("AdaptorUserId");

                    b.Property<long>("AdaptorUserRoleId");

                    b.HasKey("AdaptorUserId", "AdaptorUserRoleId");

                    b.HasIndex("AdaptorUserRoleId");

                    b.ToTable("AdaptorUserUserRole");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.UserAndLimitationManagement.OpenStackSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationCredentialsId")
                        .IsRequired();

                    b.Property<string>("ApplicationCredentialsSecret")
                        .IsRequired();

                    b.Property<DateTime>("AuthenticationTime");

                    b.Property<DateTime>("ExpirationTime");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OpenStackSession");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.UserAndLimitationManagement.ResourceLimitation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AdaptorUserId");

                    b.Property<int?>("MaxCoresPerJob");

                    b.Property<long?>("NodeTypeId");

                    b.Property<int?>("TotalMaxCores");

                    b.HasKey("Id");

                    b.HasIndex("AdaptorUserId");

                    b.HasIndex("NodeTypeId");

                    b.ToTable("ResourceLimitation");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.UserAndLimitationManagement.SessionCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AuthenticationTime");

                    b.Property<DateTime>("LastAccessTime");

                    b.Property<string>("UniqueCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SessionCode");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.AdminUserManagement.AdministrationUser", b =>
                {
                    b.HasOne("HaaSMiddleware.DomainObjects.Notifications.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.AdminUserManagement.AdministrationUserRole", b =>
                {
                    b.HasOne("HaaSMiddleware.DomainObjects.AdminUserManagement.AdministrationRole", "AdministrationRole")
                        .WithMany("AdministrationUserRoles")
                        .HasForeignKey("AdministrationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HaaSMiddleware.DomainObjects.AdminUserManagement.AdministrationUser", "AdministrationUser")
                        .WithMany("AdministrationUserRoles")
                        .HasForeignKey("AdministrationUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.ClusterInformation.Cluster", b =>
                {
                    b.HasOne("HaaSMiddleware.DomainObjects.ClusterInformation.ClusterAuthenticationCredentials", "ServiceAccountCredentials")
                        .WithMany()
                        .HasForeignKey("ServiceAccountCredentialsId");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.ClusterInformation.ClusterAuthenticationCredentials", b =>
                {
                    b.HasOne("HaaSMiddleware.DomainObjects.ClusterInformation.Cluster", "Cluster")
                        .WithMany("AuthenticationCredentials")
                        .HasForeignKey("ClusterId");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.ClusterInformation.ClusterNodeType", b =>
                {
                    b.HasOne("HaaSMiddleware.DomainObjects.ClusterInformation.Cluster", "Cluster")
                        .WithMany("NodeTypes")
                        .HasForeignKey("ClusterId");

                    b.HasOne("HaaSMiddleware.DomainObjects.FileTransfer.FileTransferMethod", "FileTransferMethod")
                        .WithMany()
                        .HasForeignKey("FileTransferMethodId");

                    b.HasOne("HaaSMiddleware.DomainObjects.JobManagement.JobTemplate", "JobTemplate")
                        .WithMany()
                        .HasForeignKey("JobTemplateId");

                    b.HasOne("HaaSMiddleware.DomainObjects.JobManagement.TaskTemplate", "TaskTemplate")
                        .WithMany()
                        .HasForeignKey("TaskTemplateId");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.JobManagement.CommandTemplate", b =>
                {
                    b.HasOne("HaaSMiddleware.DomainObjects.ClusterInformation.ClusterNodeType", "ClusterNodeType")
                        .WithMany("PossibleCommands")
                        .HasForeignKey("ClusterNodeTypeId");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.JobManagement.CommandTemplateParameter", b =>
                {
                    b.HasOne("HaaSMiddleware.DomainObjects.JobManagement.CommandTemplate", "CommandTemplate")
                        .WithMany("TemplateParameters")
                        .HasForeignKey("CommandTemplateId");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.JobManagement.CommandTemplateParameterValue", b =>
                {
                    b.HasOne("HaaSMiddleware.DomainObjects.JobManagement.TaskSpecification")
                        .WithMany("CommandParameterValues")
                        .HasForeignKey("TaskSpecificationId");

                    b.HasOne("HaaSMiddleware.DomainObjects.JobManagement.CommandTemplateParameter", "TemplateParameter")
                        .WithMany()
                        .HasForeignKey("TemplateParameterId");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.JobManagement.EnvironmentVariable", b =>
                {
                    b.HasOne("HaaSMiddleware.DomainObjects.JobManagement.JobSpecification")
                        .WithMany("EnvironmentVariables")
                        .HasForeignKey("JobSpecificationId");

                    b.HasOne("HaaSMiddleware.DomainObjects.JobManagement.JobTemplate")
                        .WithMany("EnvironmentVariables")
                        .HasForeignKey("JobTemplateId");

                    b.HasOne("HaaSMiddleware.DomainObjects.JobManagement.TaskSpecification")
                        .WithMany("EnvironmentVariables")
                        .HasForeignKey("TaskSpecificationId");

                    b.HasOne("HaaSMiddleware.DomainObjects.JobManagement.TaskTemplate")
                        .WithMany("EnvironmentVariables")
                        .HasForeignKey("TaskTemplateId");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.JobManagement.JobInformation.SubmittedJobInfo", b =>
                {
                    b.HasOne("HaaSMiddleware.DomainObjects.JobManagement.JobSpecification", "Specification")
                        .WithMany()
                        .HasForeignKey("SpecificationId");

                    b.HasOne("HaaSMiddleware.DomainObjects.UserAndLimitationManagement.AdaptorUser", "Submitter")
                        .WithMany()
                        .HasForeignKey("SubmitterId");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.JobManagement.JobInformation.SubmittedTaskInfo", b =>
                {
                    b.HasOne("HaaSMiddleware.DomainObjects.ClusterInformation.ClusterNodeType", "NodeType")
                        .WithMany()
                        .HasForeignKey("NodeTypeId");

                    b.HasOne("HaaSMiddleware.DomainObjects.JobManagement.TaskSpecification", "Specification")
                        .WithMany()
                        .HasForeignKey("SpecificationId");

                    b.HasOne("HaaSMiddleware.DomainObjects.JobManagement.JobInformation.SubmittedJobInfo")
                        .WithMany("Tasks")
                        .HasForeignKey("SubmittedJobInfoId");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.JobManagement.JobSpecification", b =>
                {
                    b.HasOne("HaaSMiddleware.DomainObjects.ClusterInformation.Cluster", "Cluster")
                        .WithMany()
                        .HasForeignKey("ClusterId");

                    b.HasOne("HaaSMiddleware.DomainObjects.ClusterInformation.ClusterAuthenticationCredentials", "ClusterUser")
                        .WithMany()
                        .HasForeignKey("ClusterUserId");

                    b.HasOne("HaaSMiddleware.DomainObjects.FileTransfer.FileTransferMethod", "FileTransferMethod")
                        .WithMany()
                        .HasForeignKey("FileTransferMethodId");

                    b.HasOne("HaaSMiddleware.DomainObjects.UserAndLimitationManagement.AdaptorUserGroup", "SubmitterGroup")
                        .WithMany()
                        .HasForeignKey("SubmitterGroupId");

                    b.HasOne("HaaSMiddleware.DomainObjects.UserAndLimitationManagement.AdaptorUser", "Submitter")
                        .WithMany()
                        .HasForeignKey("SubmitterId");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.JobManagement.PropertyChangeSpecification", b =>
                {
                    b.HasOne("HaaSMiddleware.DomainObjects.JobManagement.JobTemplate", "JobTemplate")
                        .WithMany("PropertyChangeSpecification")
                        .HasForeignKey("JobTemplateId");

                    b.HasOne("HaaSMiddleware.DomainObjects.JobManagement.TaskTemplate", "TaskTemplate")
                        .WithMany("PropertyChangeSpecification")
                        .HasForeignKey("TaskTemplateId");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.JobManagement.TaskDependency", b =>
                {
                    b.HasOne("HaaSMiddleware.DomainObjects.JobManagement.TaskSpecification", "ParentTaskSpecification")
                        .WithMany("Depended")
                        .HasForeignKey("ParentTaskSpecificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HaaSMiddleware.DomainObjects.JobManagement.TaskSpecification", "TaskSpecification")
                        .WithMany("DependsOn")
                        .HasForeignKey("TaskSpecificationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.JobManagement.TaskSpecification", b =>
                {
                    b.HasOne("HaaSMiddleware.DomainObjects.JobManagement.CommandTemplate", "CommandTemplate")
                        .WithMany()
                        .HasForeignKey("CommandTemplateId");

                    b.HasOne("HaaSMiddleware.DomainObjects.JobManagement.JobSpecification", "JobSpecification")
                        .WithMany("Tasks")
                        .HasForeignKey("JobSpecificationId");

                    b.HasOne("HaaSMiddleware.DomainObjects.FileTransfer.FileSpecification", "LogFile")
                        .WithMany()
                        .HasForeignKey("LogFileId");

                    b.HasOne("HaaSMiddleware.DomainObjects.ClusterInformation.ClusterNodeType", "NodeType")
                        .WithMany()
                        .HasForeignKey("NodeTypeId");

                    b.HasOne("HaaSMiddleware.DomainObjects.FileTransfer.FileSpecification", "ProgressFile")
                        .WithMany()
                        .HasForeignKey("ProgressFileId");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.Notifications.MessageLocalization", b =>
                {
                    b.HasOne("HaaSMiddleware.DomainObjects.Notifications.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("HaaSMiddleware.DomainObjects.Notifications.MessageTemplate")
                        .WithMany("Localizations")
                        .HasForeignKey("MessageTemplateId");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.Notifications.MessageTemplateParameter", b =>
                {
                    b.HasOne("HaaSMiddleware.DomainObjects.Notifications.MessageTemplate")
                        .WithMany("Parameters")
                        .HasForeignKey("MessageTemplateId");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.Notifications.Notification", b =>
                {
                    b.HasOne("HaaSMiddleware.DomainObjects.Notifications.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("HaaSMiddleware.DomainObjects.Notifications.MessageTemplate", "MessageTemplate")
                        .WithMany()
                        .HasForeignKey("MessageTemplateId");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.OpenStack.OpenStackAuthenticationCredentials", b =>
                {
                    b.HasOne("HaaSMiddleware.DomainObjects.OpenStack.OpenStackInstance", "OpenStackInstance")
                        .WithMany("OpenStackAuthenticationCredentials")
                        .HasForeignKey("OpenStackInstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.UserAndLimitationManagement.AdaptorUser", b =>
                {
                    b.HasOne("HaaSMiddleware.DomainObjects.Notifications.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.UserAndLimitationManagement.AdaptorUserUserGroup", b =>
                {
                    b.HasOne("HaaSMiddleware.DomainObjects.UserAndLimitationManagement.AdaptorUserGroup", "AdaptorUserGroup")
                        .WithMany("AdaptorUserUserGroups")
                        .HasForeignKey("AdaptorUserGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HaaSMiddleware.DomainObjects.UserAndLimitationManagement.AdaptorUser", "AdaptorUser")
                        .WithMany("AdaptorUserUserGroups")
                        .HasForeignKey("AdaptorUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.UserAndLimitationManagement.AdaptorUserUserRole", b =>
                {
                    b.HasOne("HaaSMiddleware.DomainObjects.UserAndLimitationManagement.AdaptorUser", "AdaptorUser")
                        .WithMany("AdaptorUserUserRoles")
                        .HasForeignKey("AdaptorUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HaaSMiddleware.DomainObjects.UserAndLimitationManagement.AdaptorUserRole", "AdaptorUserRole")
                        .WithMany("AdaptorUserUserRoles")
                        .HasForeignKey("AdaptorUserRoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.UserAndLimitationManagement.OpenStackSession", b =>
                {
                    b.HasOne("HaaSMiddleware.DomainObjects.UserAndLimitationManagement.AdaptorUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.UserAndLimitationManagement.ResourceLimitation", b =>
                {
                    b.HasOne("HaaSMiddleware.DomainObjects.UserAndLimitationManagement.AdaptorUser")
                        .WithMany("Limitations")
                        .HasForeignKey("AdaptorUserId");

                    b.HasOne("HaaSMiddleware.DomainObjects.ClusterInformation.ClusterNodeType", "NodeType")
                        .WithMany()
                        .HasForeignKey("NodeTypeId");
                });

            modelBuilder.Entity("HaaSMiddleware.DomainObjects.UserAndLimitationManagement.SessionCode", b =>
                {
                    b.HasOne("HaaSMiddleware.DomainObjects.UserAndLimitationManagement.AdaptorUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
